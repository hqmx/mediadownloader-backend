const StealthBrowser = require('./stealthBrowser');
const SmartProxyManager = require('./smartProxyManager');

class SmartDownloader {
  constructor() {
    this.stealthBrowser = new StealthBrowser();
    this.proxyManager = new SmartProxyManager();
    this.attemptCount = 0;

    // SmartProxy + Ïø†ÌÇ§ Í∏∞Î∞ò Ï†ëÍ∑º Ï°∞Ìï©
    this.methods = [
      {
        name: 'cookie-smartproxy',
        handler: this.tryCookieWithSmartProxy.bind(this),
        description: 'Playwright cookies via SmartProxy + yt-dlp'
      }
    ];

    console.log('üéØ SmartDownloader - SmartProxy + Ïø†ÌÇ§ Í∏∞Î∞ò Ï†ëÍ∑º Î∞©Ïãù');
  }

  async extractVideoInfo(url) {
    console.log('=== SmartDownloader ÏãúÏûë ===');
    console.log('URL:', url);
    
    const errors = [];
    
    for (const method of this.methods) {
      try {
        console.log(`\n--- Î∞©Î≤ï ${method.name} ÏãúÎèÑ Ï§ë ---`);
        console.log('ÏÑ§Î™Ö:', method.description);
        
        const startTime = Date.now();
        const result = await method.handler(url);
        const duration = Date.now() - startTime;
        
        if (result && result.videoId) {
          console.log(`‚úÖ ÏÑ±Í≥µ! (${duration}ms)`);
          console.log(`Î∞©Î≤ï: ${method.name}`);
          console.log(`Ï†úÎ™©: ${result.title}`);
          console.log(`ÎπÑÎîîÏò§ ID: ${result.videoId}`);
          console.log(`Ìè¨Îß∑ Ïàò: ${result.formats?.length || 0}`);
          
          // ÏÑ±Í≥µ ÌÜµÍ≥Ñ Î°úÍπÖ
          this.logSuccess(method.name, duration);
          
          return result;
        }
        
        this.attemptCount++;
      } catch (error) {
        this.attemptCount++;

        const errorInfo = {
          method: method.name,
          error: error.message,
          timestamp: new Date().toISOString(),
          attemptCount: this.attemptCount
        };

        errors.push(errorInfo);
        console.error(`‚ùå ${method.name} Ïã§Ìå® (ÏãúÎèÑ ${this.attemptCount}):`, error.message);

        // ÌîÑÎ°ùÏãú ÌÑ∞ÎÑêÎßÅ Ïò§Î•ò Ïãú Ï¶âÏãú Î∏åÎùºÏö∞Ï†Ä Î™®Îìú ÏãúÎèÑ
        if (method.name === 'yt-dlp-stealth' &&
            (error.message.includes('Tunnel connection failed') || error.message.includes('ProxyError'))) {
          console.log('üöÄ ÌîÑÎ°ùÏãú Ïò§Î•ò Í∞êÏßÄ, Ï¶âÏãú Î∏åÎùºÏö∞Ï†Ä Ïä§ÌÖîÏä§ Î™®ÎìúÎ°ú Ï†ÑÌôò...');

          try {
            const browserResult = await this.tryBrowserStealth(url);
            if (browserResult && browserResult.videoId) {
              console.log('‚úÖ Î∏åÎùºÏö∞Ï†Ä Î™®Îìú Í∏¥Í∏â Ï†ÑÌôò ÏÑ±Í≥µ!');
              return browserResult;
            }
          } catch (browserError) {
            console.error('Î∏åÎùºÏö∞Ï†Ä Î™®Îìú Í∏¥Í∏â Ï†ÑÌôòÎèÑ Ïã§Ìå®:', browserError.message);
          }
        }

        // Î∏åÎùºÏö∞Ï†Ä Ïä§ÌÖîÏä§ Ïã§Ìå® Ïãú ÏÑ∏ÏÖò Î¶¨ÏÖã
        if (method.name === 'browser-stealth') {
          this.stealthBrowser.resetSession();
        }

        // Ïû¨ÏãúÎèÑ Ï†Ñ ÎåÄÍ∏∞
        if (method !== this.methods[this.methods.length - 1]) {
          await this.randomDelay();
        }
      }
    }
    
    // Î™®Îì† Î∞©Î≤ï Ïã§Ìå®
    console.error('=== Î™®Îì† Î∞©Î≤ï Ïã§Ìå® ===');
    errors.forEach((err, index) => {
      console.error(`${index + 1}. ${err.method}: ${err.error}`);
    });
    
    throw new Error(`Î™®Îì† Ï∂îÏ∂ú Î∞©Î≤ïÏù¥ Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${errors.map(e => `${e.method}(${e.error})`).join(', ')}`);
  }


  async tryCookieWithSmartProxy(url, downloadOptions = null) {
    console.log('üç™ SmartProxyÎ•º ÌÜµÌïú Ïø†ÌÇ§ ÌöçÎìù + yt-dlp Ï°∞Ìï©');

    try {
      // 1Îã®Í≥Ñ: SmartProxyÎ°ú Ïø†ÌÇ§ ÌöçÎìù
      const cookies = await this.getCookiesViaSmartProxy(url);
      if (!cookies || cookies.length === 0) {
        throw new Error('SmartProxyÎ•º ÌÜµÌïú Ïø†ÌÇ§ ÌöçÎìù Ïã§Ìå®');
      }

      console.log(`‚úÖ SmartProxy Ïø†ÌÇ§ ÌöçÎìù ÏÑ±Í≥µ: ${cookies.length}Í∞ú`);

      // 2Îã®Í≥Ñ: Ïø†ÌÇ§Î•º yt-dlp ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò Î∞è Ï†ÄÏû•
      const cookiePath = await this.saveCookiesForYtDlp(cookies);

      // 3Îã®Í≥Ñ: Ïø†ÌÇ§Î•º Ïù¥Ïö©Ìïú yt-dlp Ïã§Ìñâ (ÌîÑÎ°ùÏãú ÏóÜÏù¥)
      if (downloadOptions) {
        return await this.downloadWithCookies(url, downloadOptions, cookiePath);
      } else {
        return await this.extractWithCookies(url, cookiePath);
      }
    } catch (error) {
      console.error('üç™ Ïø†ÌÇ§ Í∏∞Î∞ò Ï†ëÍ∑º Ïã§Ìå®:', error.message);
      throw error;
    }
  }

  // SmartProxyÎ•º ÌÜµÌïú Ïø†ÌÇ§ ÌöçÎìù
  async getCookiesViaSmartProxy(url) {
    const { chromium } = require('playwright');
    const proxy = this.proxyManager.getProxy();

    if (!proxy) {
      throw new Error('SmartProxy ÏÑ§Ï†ïÏùÑ Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§');
    }

    console.log(`üåê SmartProxy Ïó∞Í≤∞: ${proxy.replace(/:[^:@]+@/, ':***@')}`);

    // ÌîÑÎ°ùÏãú URL ÌååÏã±
    const proxyMatch = proxy.match(/http:\/\/([^:]+):([^@]+)@([^:]+):(\d+)/);
    if (!proxyMatch) {
      throw new Error('SmartProxy URL ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§');
    }

    const [, username, password, server, port] = proxyMatch;

    const browser = await chromium.launch({
      headless: true,
      args: [
        '--disable-blink-features=AutomationControlled',
        '--disable-web-security',
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-background-timer-throttling',
        '--disable-renderer-backgrounding',
        '--disable-features=TranslateUI',
        '--disable-ipc-flooding-protection'
      ]
    });

    const context = await browser.newContext({
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      proxy: {
        server: `http://${server}:${port}`,
        username: username,
        password: password
      }
    });

    const page = await context.newPage();

    try {
      // HTTP ÌÖåÏä§Ìä∏Î°ú Ïó∞Í≤∞ ÌôïÏù∏
      console.log('üéØ HTTP Ïó∞Í≤∞ ÌÖåÏä§Ìä∏...');
      await page.goto('http://httpbin.org/ip', {
        waitUntil: 'domcontentloaded',
        timeout: 10000
      });

      const ipContent = await page.textContent('body');
      console.log('üìç ÌîÑÎ°ùÏãú IP ÌôïÏù∏:', ipContent.slice(0, 100));

      console.log('üç™ Ï†ïÏ†Å YouTube Ïø†ÌÇ§ ÏÉùÏÑ± Ï§ë...');

      // ÌîÑÎ°ùÏãúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïó∞Í≤∞Îêú Í≤ÉÏùÑ ÌôïÏù∏ÌñàÏúºÎØÄÎ°ú, Ï†ïÏ†Å Ïø†ÌÇ§ ÏÇ¨Ïö©
      const staticCookies = [
        {
          name: 'CONSENT',
          value: 'YES+cb.20210328-17-p0.en+FX+000',
          domain: '.youtube.com',
          path: '/',
          secure: false
        },
        {
          name: 'VISITOR_INFO1_LIVE',
          value: 'Uakgb_J5B9g',
          domain: '.youtube.com',
          path: '/',
          secure: false
        },
        {
          name: 'PREF',
          value: 'tz=Asia.Seoul',
          domain: '.youtube.com',
          path: '/',
          secure: false
        }
      ];

      console.log(`üìä ÏÉùÏÑ±Îêú Ï†ïÏ†Å Ïø†ÌÇ§ Ïàò: ${staticCookies.length}`);
      console.log('‚úÖ SmartProxy IP Í≤ÄÏ¶ù ÏôÑÎ£å, Ï†ïÏ†Å Ïø†ÌÇ§ ÏÇ¨Ïö©');

      return staticCookies;

    } catch (error) {
      console.error('SmartProxy Î∏åÎùºÏö∞Ï†Ä ÏÑ∏ÏÖò Ïò§Î•ò:', error.message);
      throw error;
    } finally {
      await browser.close();
    }
  }

  // Ïø†ÌÇ§Î•º yt-dlp Netscape ÌòïÏãùÏúºÎ°ú Ï†ÄÏû•
  async saveCookiesForYtDlp(cookies) {
    const fs = require('fs');
    const path = require('path');

    const cookiePath = path.join('/tmp', 'youtube-cookies.txt');
    let netscapeContent = '# Netscape HTTP Cookie File\n';

    cookies.forEach(cookie => {
      let expires = '0';
      if (cookie.expires && cookie.expires > 0) {
        expires = Math.floor(cookie.expires).toString();
      } else if (cookie.expires === -1 || !cookie.expires) {
        // Session cookie -> ÌòÑÏû¨ ÏãúÍ∞Ñ + 1ÎÖÑ
        expires = Math.floor(Date.now() / 1000 + 365 * 24 * 3600).toString();
      }

      const line = [
        cookie.domain || '.youtube.com',
        cookie.domain?.startsWith('.') ? 'TRUE' : 'FALSE',
        cookie.path || '/',
        cookie.secure ? 'TRUE' : 'FALSE',
        expires,
        cookie.name,
        cookie.value
      ].join('\t');

      netscapeContent += line + '\n';
    });

    fs.writeFileSync(cookiePath, netscapeContent);
    console.log(`üç™ Ïø†ÌÇ§ ÌååÏùº Ï†ÄÏû• ÏôÑÎ£å: ${cookiePath}`);

    return cookiePath;
  }

  // Ïø†ÌÇ§Î•º Ïù¥Ïö©Ìïú Ï†ïÎ≥¥ Ï∂îÏ∂ú
  async extractWithCookies(url, cookiePath) {
    const { spawn } = require('child_process');

    const args = [
      '--cookies', cookiePath,
      '--user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      '--add-header', 'Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
      '--add-header', 'Accept-Language:en-US,en;q=0.9',
      '--add-header', 'DNT:1',
      '--socket-timeout', '60',
      '--retries', '3',
      '--quiet',
      '--no-warnings',
      '--dump-json',
      url
    ];

    return new Promise((resolve, reject) => {
      console.log('üöÄ yt-dlp Ïø†ÌÇ§ Ïù∏Ï¶ù Ïã§Ìñâ...');
      const process = spawn('yt-dlp', args);
      let stdout = '';
      let stderr = '';

      process.stdout.on('data', (data) => {
        stdout += data.toString();
      });

      process.stderr.on('data', (data) => {
        stderr += data.toString();
      });

      process.on('close', (code) => {
        if (code === 0 && stdout.trim()) {
          try {
            const videoInfo = JSON.parse(stdout.trim());
            const result = {
              videoId: videoInfo.id,
              title: videoInfo.title || 'Unknown Title',
              duration: videoInfo.duration || 0,
              uploader: videoInfo.uploader || 'Unknown',
              thumbnail: videoInfo.thumbnail,
              formats: videoInfo.formats || [],
              method: 'cookie-smartproxy'
            };
            console.log(`‚úÖ Ïø†ÌÇ§ Ïù∏Ï¶ù Ï†ïÎ≥¥ Ï∂îÏ∂ú ÏÑ±Í≥µ: ${result.title}`);
            resolve(result);
          } catch (parseError) {
            reject(new Error(`JSON ÌååÏã± Ïã§Ìå®: ${parseError.message}`));
          }
        } else {
          console.error('yt-dlp Ïø†ÌÇ§ Ïù∏Ï¶ù stderr:', stderr);
          reject(new Error(`yt-dlp Ïø†ÌÇ§ Ïù∏Ï¶ù Ïã§Ìå® (ÏΩîÎìú ${code}): ${stderr}`));
        }
      });

      process.on('error', (error) => {
        reject(new Error(`yt-dlp Ïø†ÌÇ§ Ïù∏Ï¶ù ÌîÑÎ°úÏÑ∏Ïä§ Ïò§Î•ò: ${error.message}`));
      });
    });
  }

  // Ïø†ÌÇ§Î•º Ïù¥Ïö©Ìïú Îã§Ïö¥Î°úÎìú
  async downloadWithCookies(url, options, cookiePath) {
    const { spawn } = require('child_process');
    const path = require('path');
    const fs = require('fs');

    const downloadId = Date.now().toString() + Math.random().toString(36).substr(2, 9);
    const filename = `download_${downloadId}.${options.format}`;
    const filePath = path.join('/tmp/mediadownloader', filename);

    // ÏûÑÏãú ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
    const tempDir = path.dirname(filePath);
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    const args = [
      '--cookies', cookiePath,
      '--user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      '--add-header', 'Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
      '--add-header', 'Accept-Language:en-US,en;q=0.9',
      '--add-header', 'DNT:1',
      '--socket-timeout', '60',
      '--retries', '3',
      '--quiet',
      '--no-warnings',
      '--output', filePath
    ];

    // Ìè¨Îß∑Í≥º ÌíàÏßà ÏÑ§Ï†ï
    if (options.audioOnly) {
      args.push('--extract-audio', '--audio-format', options.format);
      if (options.quality) {
        args.push('--audio-quality', options.quality.replace(/[^0-9]/g, ''));
      }
    } else {
      args.push('--format', `best[height<=${options.quality.replace(/[^0-9]/g, '')}][ext=${options.format}]`);
    }

    args.push(url);

    return new Promise((resolve, reject) => {
      console.log('üöÄ yt-dlp Ïø†ÌÇ§ Ïù∏Ï¶ù Îã§Ïö¥Î°úÎìú ÏãúÏûë...');
      const process = spawn('yt-dlp', args);
      let stderr = '';

      process.stderr.on('data', (data) => {
        stderr += data.toString();
      });

      process.on('close', (code) => {
        if (code === 0 && fs.existsSync(filePath)) {
          const stats = fs.statSync(filePath);
          console.log(`‚úÖ Ïø†ÌÇ§ Ïù∏Ï¶ù Îã§Ïö¥Î°úÎìú ÏÑ±Í≥µ: ${filename}`);
          resolve({
            success: true,
            downloadId: downloadId,
            filename: filename,
            filePath: filePath,
            fileSize: stats.size,
            method: 'cookie-smartproxy'
          });
        } else {
          console.error('yt-dlp Ïø†ÌÇ§ Ïù∏Ï¶ù Îã§Ïö¥Î°úÎìú stderr:', stderr);
          reject(new Error(`yt-dlp Ïø†ÌÇ§ Ïù∏Ï¶ù Îã§Ïö¥Î°úÎìú Ïã§Ìå® (ÏΩîÎìú ${code}): ${stderr}`));
        }
      });

      process.on('error', (error) => {
        reject(new Error(`yt-dlp Ïø†ÌÇ§ Ïù∏Ï¶ù Îã§Ïö¥Î°úÎìú ÌîÑÎ°úÏÑ∏Ïä§ Ïò§Î•ò: ${error.message}`));
      });
    });
  }

  // ÎèôÏùº ÏÑ∏ÏÖò Îã§Ïö¥Î°úÎìú Í∏∞Îä• Ï∂îÍ∞Ä
  async downloadVideo(url, options) {
    console.log('=== SmartDownloader Îã§Ïö¥Î°úÎìú ÏãúÏûë ===');
    console.log('URL:', url);
    console.log('ÏòµÏÖò:', options);

    const errors = [];

    for (const method of this.methods) {
      try {
        console.log(`\n--- Î∞©Î≤ï ${method.name} Îã§Ïö¥Î°úÎìú ÏãúÎèÑ Ï§ë ---`);

        const startTime = Date.now();
        const result = await method.handler(url, options);
        const duration = Date.now() - startTime;

        if (result && result.success) {
          console.log(`‚úÖ Îã§Ïö¥Î°úÎìú ÏÑ±Í≥µ! (${duration}ms)`);
          console.log(`Î∞©Î≤ï: ${method.name}`);
          console.log(`ÌååÏùº: ${result.filename}`);
          console.log(`ÌÅ¨Í∏∞: ${result.fileSize} bytes`);

          return result;
        }

        this.attemptCount++;
      } catch (error) {
        this.attemptCount++;
        errors.push({ method: method.name, error: error.message });
        console.error(`‚ùå ${method.name} Îã§Ïö¥Î°úÎìú Ïã§Ìå®:`, error.message);
      }
    }

    // Î™®Îì† Î∞©Î≤ï Ïã§Ìå®
    console.error('=== Î™®Îì† Îã§Ïö¥Î°úÎìú Î∞©Î≤ï Ïã§Ìå® ===');
    throw new Error(`Î™®Îì† Îã§Ïö¥Î°úÎìú Î∞©Î≤ï Ïã§Ìå®: ${errors.map(e => e.method).join(', ')}`);
  }

  async randomDelay() {
    const delay = 3000 + Math.random() * 5000; // 3-8Ï¥à ÎûúÎç§
    console.log(`‚è±Ô∏è  ${Math.floor(delay)}ms ÎåÄÍ∏∞ Ï§ë...`);
    await new Promise(resolve => setTimeout(resolve, delay));
  }

  logSuccess(method, duration) {
    console.log(`‚úÖ ${method} ÏÑ±Í≥µ (${duration}ms)`);
  }

  async healthCheck() {
    // Î∏åÎùºÏö∞Ï†Ä ÏÉÅÌÉú ÌôïÏù∏
    
    return {
      smartProxy: {
        enabled: this.proxyManager.isEnabled(),
        sessionInfo: this.proxyManager.getSessionInfo()
      },
      services: {
        ytdlp: true,
        playwright: true
      }
    };
  }
}

module.exports = new SmartDownloader();